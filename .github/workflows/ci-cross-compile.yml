name: Cross Compile CI
on:
  pull_request:
  push:
    tags:
    branches:
      - 'master'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This is the matrix. They form permutations.
        os: [ubuntu-latest]
        preset: [android-armeabi-v7a-vcpkg, android-arm64-v8a-vcpkg, android-x86-vcpkg, android-x86_64-vcpkg]
        triplet: [""]
        # These are additional individual jobs. There are no permutations of these.
        include:
          # Testing x86-windows bit in debug only
          - os: windows-latest
            preset: ninja-multi-vcpkg
            triplet: x86-windows

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Linux dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libgl1-mesa-dev libglu1-mesa-dev
        if: matrix.os == 'ubuntu-latest'

      - name: Set GCC 10
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
        if: matrix.os == 'ubuntu-latest' && matrix.cc == ''      

      - name: Set NDK 23
        run: |
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV

      # Setup nasm, needed for ffmpeg stuff
      - uses: ilammy/setup-nasm@v1

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      - name: Restore artifacts, or setup vcpkg for building artifacts
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          # Prevent all ubuntu-latest and windows-latest builds from having the same key
          appendedCacheKey: ${{matrix.preset}}${{matrix.triplet}}

      - name: Configure CMake+vcpkg.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: '${{ matrix.preset }}'
        env:
          CXX: ''
          CC: ''

      - name: Run CMake+vcpkg to build (Debug).
        uses: lukka/run-cmake@v10
        with:
          configurePreset: '${{ matrix.preset }}'
          buildPreset: '${{ matrix.preset }}-debug'
        env:
          CXX: ''
          CC: ''

      - name: Run CMake+vcpkg to build (Release).
        uses: lukka/run-cmake@v10
        with:
          configurePreset: '${{ matrix.preset }}'
          buildPreset: '${{ matrix.preset }}-release'
        env:
          CXX: ''
          CC: ''

      - uses: actions/upload-artifact@v3
        with:
          name: openblack-${{ matrix.triplet || matrix.preset }}-${{github.sha}}
          path: cmake-build-presets/${{ matrix.preset }}/bin
          if-no-files-found: error

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}

  assemble-android-apk:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This is the matrix. They form permutations.
        os: [ ubuntu-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install Linux dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libgl1-mesa-dev libglu1-mesa-dev
        if: matrix.os == 'ubuntu-latest'
      - name: Set GCC 10
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
        if: matrix.os == 'ubuntu-latest' && matrix.cc == ''
      - name: Set NDK 23
        run: |
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Run Gradle Configure CMake (Debug)
        uses: gradle/gradle-build-action@v2
        with:
          arguments: configureCMakeDebug
          build-root-directory: android
      - name: Run Gradle Configure CMake (Release)
        uses: gradle/gradle-build-action@v2
        with:
          arguments: configureCMakeRelWithDebInfo
          build-root-directory: android
      - name: Run Gradle Assemble (Debug)
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleDebug
          build-root-directory: android
      - name: Run Gradle Assemble (Release)
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleRelease
          build-root-directory: android
      - uses: actions/upload-artifact@v3
        with:
          name: openblack-android-apk-${{github.sha}}
          path: android/app/build/outputs/apk
          if-no-files-found: error
